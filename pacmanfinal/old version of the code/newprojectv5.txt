#include <iostream>
#include <stdio.h>
#include <windows.h>
#include <string>
#include <vector>
#include <cstdlib>

using namespace std;
char tmp_map[30][60];

char map[30][60] = {
	"+======================================================+",
	"|                                                      |",
	"|                                                     0|",
	"|                                                      |",
	"|                                                      |",
	"|                                                      |",
	"|                                                      |",
	"|                                                      |",
	"|                                                      |",
	"|                                                      |",
	"|                                                      |",
	"|####                  #        #                  ####|",
	"|<                     #        #                     >|",
	"|####                  ##########                  ####|",
	"|                                                      |",
	"|                      ##########                      |",
	"|  ##################      ##      ##################  |",
	"|..........................##..........................|",
	"|..#####......############################......#####..|",
	"|......#..##................................##..#......|",
	"|###...#..##..############################..##..#...###|",
	"|.........##...............##...............##.........|",
	"|..######################..##..######################..|",
	"|......................................................|",
	"+======================================================+"
};

void ShowMap()
{
	for (int i = 0; i < 30; i++) {
		printf("%s\n", map[i]);
	}
}


void gotoxy(short x, short y)
{
	HANDLE hStdout = GetStdHandle(STD_OUTPUT_HANDLE);
	COORD position = { x, y };

	SetConsoleCursorPosition(hStdout, position);
}

class entity {
public:
	entity(int x, int y) {
		this->x = x;
		this->y = y;
	}

	void move_x(int p) {
		if (map[y][x + p] == ' ') x += p;
	}

	void move_y(int p) {
		if (map[y + p][x] == ' ') y += p;
	}

	void move(int p, int q) {
		x += p;
		y += q;
	}

	int get_x() { return x; }
	int get_y() { return y; }

	void draw(char p) {
		map[x][y] = p;
		gotoxy(x, y); printf("%c", p);
	}

private:
	int x;
	int y;
};

struct walk {
	short walk_count;
	short x;
	short y;
	short back;
};

struct target {
	short x;
	short y;
};

vector<target> walk_queue;

vector<walk> BFSArray;

void AddArray(int x, int y, int wc, int back) {
	if (tmp_map[y][x] == ' ' || tmp_map[y][x] == '.') {
		tmp_map[y][x] = '#';
		if (tmp_map[y][x + 1] == ' ' || tmp_map[y][x + 1] == '.'){
			tmp_map[y][x + 1] =  '#';
		}
		walk tmp;
		tmp.x = x;
		tmp.y = y;
		tmp.walk_count = wc;
		tmp.back = back;
		BFSArray.push_back(tmp);
	}
}

void FindPath(int sx, int sy, int x, int y) {


	memcpy(tmp_map, map, sizeof(map));
	BFSArray.clear();
	walk tmp;
	tmp.x = sx;
	tmp.y = sy;
	tmp.walk_count = 0;
	tmp.back = -1;
	BFSArray.push_back(tmp);

	int i = 0;
	while (i < BFSArray.size()) {
		if ((BFSArray[i].x == x && BFSArray[i].y == y) || (BFSArray[i].x == x + 1 && BFSArray[i].y == y) || (BFSArray[i].x + 1 == x && BFSArray[i].y == y)) {
			walk_queue.clear();
			target tmp2;
			while (BFSArray[i].walk_count != 0) {
				tmp2.x = BFSArray[i].x;
				tmp2.y = BFSArray[i].y;
				walk_queue.push_back(tmp2);

				i = BFSArray[i].back;
			}

			break;
		}
		if ((map[BFSArray[i].y][BFSArray[i].x + 2] == ' ' || map[BFSArray[i].y][BFSArray[i].x + 2] == '.') && (map[BFSArray[i].y][BFSArray[i].x + 3] == ' ' || map[BFSArray[i].y][BFSArray[i].x + 3] == '.')) {
			AddArray(BFSArray[i].x + 2, BFSArray[i].y, BFSArray[i].walk_count + 1, i);
		} else 		AddArray(BFSArray[i].x + 1, BFSArray[i].y, BFSArray[i].walk_count + 1, i);
		if ((map[BFSArray[i].y][BFSArray[i].x - 2] == ' ' || map[BFSArray[i].y][BFSArray[i].x - 2] == '.') && (map[BFSArray[i].y][BFSArray[i].x - 1] == ' ' || map[BFSArray[i].y][BFSArray[i].x - 1] == '.')) {
			AddArray(BFSArray[i].x - 2, BFSArray[i].y, BFSArray[i].walk_count + 1, i);
		} else 			AddArray(BFSArray[i].x - 1, BFSArray[i].y, BFSArray[i].walk_count + 1, i);
		
		AddArray(BFSArray[i].x, BFSArray[i].y + 1, BFSArray[i].walk_count + 1, i);
		AddArray(BFSArray[i].x, BFSArray[i].y - 1, BFSArray[i].walk_count + 1, i);

		/*
		AddArray(BFSArray[i].x + 2, BFSArray[i].y + 1, BFSArray[i].walk_count + 1, i);
		AddArray(BFSArray[i].x - 2, BFSArray[i].y + 1, BFSArray[i].walk_count + 1, i);
		AddArray(BFSArray[i].x + 2, BFSArray[i].y + 1, BFSArray[i].walk_count + 1, i);
		AddArray(BFSArray[i].x + 2, BFSArray[i].y - 1, BFSArray[i].walk_count + 1, i);


		AddArray(BFSArray[i].x + 2, BFSArray[i].y - 1, BFSArray[i].walk_count + 1, i);
		AddArray(BFSArray[i].x - 2, BFSArray[i].y - 1, BFSArray[i].walk_count + 1, i);
		AddArray(BFSArray[i].x - 2, BFSArray[i].y + 1, BFSArray[i].walk_count + 1, i);
		AddArray(BFSArray[i].x - 2, BFSArray[i].y - 1, BFSArray[i].walk_count + 1, i);
		*/

		i++;

	}

	BFSArray.clear();
}


int main()
{
	bool running = true;
	int x = 28; // hero x
	int y = 14; // hero y
	int sup_x = 0;
	int sup_y = 0;
	int old_x;
	int old_y;
	int con = 0;

	int ex = 30, ex2 = 28, ex3 = 26, ex4 =24;
	int ey = 12, ey2 = 12, ey3 = 12, ey4 =12;


	int pts = 0;

	printf("Instruction:\n1. Arrow Keys to move your hero\n2. Eat the dots produced by the Eater to gain poins\n3. Don't get caught by the Eater\n\n");
	printf("H -> Hard\nN -> Normal\nE -> Easy\n\nInput : ");

	system("cls");
	ShowMap();

	gotoxy(x, y); cout << "<>";

	int frame = 0, frame_old = 0;
	int sup = 0, sup2 = 0;
	int sp2 = 2, sp3 = 3, sp4 = 4, sp5 = 5;


	FindPath(ex, ey, x, y);
	//	FindPath(ex2, ey2, x, y);



	while (running) {

		gotoxy(x, y); cout << "  ";



		old_x = x;
		old_y = y;




		if (GetAsyncKeyState(VK_UP)) { con = 1; }
		if (GetAsyncKeyState(VK_DOWN)) { con = 2; }
		if (GetAsyncKeyState(VK_LEFT)) { con = 3; }
		if (GetAsyncKeyState(VK_RIGHT)) { con = 4; }


		if (con == 1) {
			if ((map[y - 1][x] == ' ' || map[y - 1][x] == '.') && (map[y - 1][x + 1] == ' ' || map[y - 1][x + 1] == '.')) {
				if (map[y - 1][x] == '.') { pts+= 2; }
				y--;
				con = 1;
			}
		}

		if (con == 2) {
			if ((map[y + 1][x] == ' ' || map[y + 1][x] == '.') && (map[y + 1][x + 1] == ' ' || map[y + 1][x + 1] == '.')) {
				if (map[y + 1][x] == '.') { pts+= 2; }
				y++;
				con = 2;
			}
		}


		if (con == 3) {
			if ((map[y][x - 2] == ' ' || map[y][x - 2] == '.') && (map[y][x - 1] != '#' && map[y][x - 1] != '|')) {
				if (map[y][x - 1] == '.' || map[y][x - 2] == '.') pts+= 2;
				x -= 2; con = 3;
			}
			else if (map[y][x - 1] == ' ' || map[y][x - 1] == '.') {
				if (map[y][x - 1] == '.') pts+= 2;
				x -= 1; con = 3;
			}
		}

		if (con == 4) {
			if ((map[y][x + 3] == ' ' || map[y][x + 3] == '.') && (map[y][x + 2] != '#' && map[y][x + 2] != '|')) {
				if (map[y][x + 1] == '.' || map[y][x + 2] == '.') pts+= 2;
				x += 2; con = 4;
			}
			else if (map[y][x + 2] == ' ' || map[y][x + 2] == '.') {
				if (map[y][x + 2] == '.') pts+=2;
				x += 1; con = 4;
			}
		}


		if (map[y][x - 1] == '<') {
			x = 52;
			y = 12;
		}
		else if (map[y][x + 2] == '>') {
			x = 2;
			y = 12;
		}


		map[old_y][old_x] = ' ';
		map[old_y][old_x + 1] = ' ';


		sup_x = 54 - x;
		sup_y = 23 - y;


		gotoxy(x, y); cout << ":D";


		gotoxy(ex, ey); cout << map[ey][ex];
		gotoxy(ex+1, ey); cout << map[ey][ex+1];

		gotoxy(ex2, ey2); cout << map[ey2][ex2];
		gotoxy(ex2 + 1, ey2); cout << map[ey2][ex2 + 1];

		gotoxy(ex3, ey3); cout << map[ey3][ex3];
		gotoxy(ex3 + 1, ey3); cout << map[ey3][ex3 + 1];

		gotoxy(ex4, ey4); cout << map[ey4][ex4];
		gotoxy(ex4 + 1, ey4); cout << map[ey4][ex4 + 1];

		if (sup == 0) {

			FindPath(ex, ey, sup_x, sup_y);
			if (frame % sp5 == 0 && walk_queue.size() != 0) {
				ex = walk_queue.back().x;
				ey = walk_queue.back().y;
			}
			walk_queue.clear();



			FindPath(ex2, ey2, sup_x, sup_y);
			if (frame >= 50 && frame% sp4 == 0 && walk_queue.size() != 0) {
				ex2 = walk_queue.back().x;
				ey2 = walk_queue.back().y;
			}
			walk_queue.clear();



			FindPath(ex3, ey3, sup_x, sup_y);
			if (frame >= 100 && frame % sp3 == 0 && walk_queue.size() != 0) {
				ex3 = walk_queue.back().x;
				ey3 = walk_queue.back().y;
			}
			walk_queue.clear();



			FindPath(ex4, ey4, sup_x, sup_y);
			if (frame >= 200 && frame % sp2 == 0 && walk_queue.size() != 0) {
				ex4 = walk_queue.back().x;
				ey4 = walk_queue.back().y;
			}
			walk_queue.clear();



		}

			if (sup == 0) {
				frame_old = frame;
			}

			if (map[y][x + 2] == '0') {
				sup = 1;
			}


			if (sup == 1)
			{
				sp2 = sp3 = sp4 = sp5 = 5;

				gotoxy(ex, ey); cout << "$$";
				gotoxy(ex2, ey2); cout << "$$";
				gotoxy(ex3, ey3); cout << "$$";
				gotoxy(ex4, ey4); cout << "$$";

			}
			else if (sup == 0) {
				sp2 = 2;
				sp3 = 3;
				sp4 = 4;
				sp5 = 5;

				gotoxy(ex, ey); cout << "D:";
				gotoxy(ex2, ey2); cout << ":c";
				gotoxy(ex3, ey3); cout << ">:";
				gotoxy(ex4, ey4); cout << ":{";


				if ((ex == x && ey == y) || (ex == x + 1 && ey == y) || (ex + 1 == x && ey == y)) {
					break;
				}
				if ((ex2 == x && ey2 == y) || (ex2 == x + 1 && ey2 == y) || (ex2 + 1 == x && ey2 == y)) {
					break;
				}
				if ((ex3 == x && ey3 == y) || (ex3 == x + 1 && ey3 == y) || (ex3 + 1 == x && ey3 == y)) {
					break;
				}
				if ((ex4 == x && ey4 == y) || (ex4 == x + 1 && ey4 == y) || (ex4 + 1 == x && ey4 == y)) {
					break;
				}
			}

			if (frame - frame_old >= 100) {
				sup = 0;
			}


		gotoxy(60, 30);
		gotoxy(60, 1); cout << pts;
		Sleep(100);
		frame ++;




	}

	system("cls");
	printf("You Lose and your score is : %i", pts);
	cin.get();
	cin.get();
	cin.get();
	cin.get();
	cin.get();
	cin.get();
	cin.get();
	cin.get();

	return 0;
}